name: test

on: push

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      # checks out the repo
      - uses: actions/checkout@v2
      # sets up python - version doesn't matter (just 3.6+ for black)
      - uses: actions/setup-python@v2
        with:
          python-version: "3"
      # cache wheels to speed up pip installs
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      # install linters
      - run: python -m pip install black flake8 isort
      # run linters
      - run: |
          flake8 .
          black . --check
          isort .
  test:
    # ---------------------------------------------------
    #    Documentation and examples can be found at
    #      https://github.com/snok/install-poetry
    # ---------------------------------------------------
    needs: linting
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9"]
        django-version: [ "2.2", "3.0", "3.1" ]
    steps:
      # Check-out repo
      - name: Check out repository
        uses: actions/checkout@v2
      # Set up Python
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Install & configure poetry
      - name: Install poetry
        uses: snok/install-poetry@v0.2.0
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      # Install dependencies if cache does not exist
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      # Add matrix specifics
      - name: Install django ${{ matrix.django-version }}
        run: |
          source .venv/bin/activate
          poetry add "Django==${{ matrix.django-version }}"
      - name: Install DRF 3.11 on Django 2.2
        if: matrix.django-version == '2.2'
        run: |
          poetry add "djangorestframework==3.11.1"
      # Run test suite
      - name: Run tests
        run: |
          source .venv/bin/activate
          poetry run pytest --cov=django_swagger_tester --verbose --assert=plain
          poetry run coverage report
