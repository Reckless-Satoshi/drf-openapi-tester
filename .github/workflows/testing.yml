name: test

on: pull_request

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - uses: actions/cache@v2
        id: cache-venv
        with:
          path: .venv
          key: venv-0  # increment to reset
      - run: |
          pip install virtualenv
          virtualenv .venv
          source .venv/bin/activate
          pip install pre-commit
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - uses: actions/cache@v2
        id: pre-commit-cache
        with:
          path: ~/.cache/pre-commit
          key: key-0
      - run: |
          source .venv/bin/activate
          pre-commit run --all-files

  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-matrix: ${{ steps.get-python-versions-action.outputs.latest-python-versions }}
    steps:
    - uses: snok/latest-python-versions@v1
      id: get-python-versions-action
      with:
        min-version: 3.6
        include-prereleases: false

  test:
    needs: [linting, get-python-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.python-matrix) }}
        django-version: [ "2.2", "3.0", "3.1", "3.2" ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true
      - name: Load cached venv
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: .venv
          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-4
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Install package
        run: poetry install --no-interaction
      - name: Install django ${{ matrix.django-version }}
        run: |
          source .venv/bin/activate
          poetry add "Django==${{ matrix.django-version }}"
      - name: Install DRF 3.11 on Django 2.2
        if: matrix.django-version == '2.2'
        run: poetry add "djangorestframework==3.11.1"
      - name: Run tests
        run: |
          source .venv/bin/activate
          poetry run pytest --cov=openapi_tester --verbose --assert=plain
          poetry run coverage report
